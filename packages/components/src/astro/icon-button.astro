---
import { Icon } from "astro-icon/components";
/**
 * @todo
 * should use Polymorphic type but it not works well...
 * https://docs.astro.build/en/guides/typescript/#polymorphic-type
 */
import type { HTMLTag, Polymorphic } from "astro/types";
import { useLink } from "@cieloazul310/astro-sarkara-utils";
import { css, cx, sva, type RecipeVariantProps } from "styled-system/css";
/** @todo recipes for astro problem */
/*
import {
  iconButton,
  buttonBase,
  type IconButtonVariantProps,
  type ButtonBaseVariantProps,
} from "styled-system/recipes";
*/

/** @todo recipes for astro problem
type ButtonVariants = IconButtonVariantProps & ButtonBaseVariantProps;
*/

const iconButton = sva({
  slots: ["button", "icon"],
  base: {
    button: {
      rounded: "md",
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      shadow: "sm",
      cursor: "pointer",
    },
  },
  variants: {
    visual: {
      solid: {
        button: {
          bg: { base: "colorPalette.600", _hover: "colorPalette.700" },
          color: "white",
          _dark: {
            bg: { base: "colorPalette.700", _hover: "colorPalette.600" },
          },
        },
      },
      outline: {
        button: {
          borderWidth: "2px",
          borderColor: { base: "colorPalette.700", _dark: "colorPalette.200" },
          color: { base: "colorPalette.700", _dark: "colorPalette.200" },
          _hover: {
            color: { base: "colorPalette.500", _dark: "colorPalette.50" },
          },
        },
      },
    },
    shape: {
      square: { button: { rounded: "md" } },
      circle: { button: { rounded: "full" } },
    },
    size: {
      sm: { button: { width: 10, height: 10 }, icon: { width: 6, height: 6 } },
      md: { button: { width: 14, height: 14 }, icon: { width: 8, height: 8 } },
      lg: {
        button: { width: 16, height: 16 },
        icon: { width: 10, height: 10 },
      },
      xl: {
        button: { width: 20, height: 20 },
        icon: { width: 14, height: 14 },
      },
    },
  },
  defaultVariants: {
    visual: "solid",
    size: "md",
    shape: "square",
  },
});

export type Props<Tag extends HTMLTag> = RecipeVariantProps<typeof iconButton> &
  Polymorphic<{ as: Tag }> & {
    className?: string;
    colorPalette?: string;
    icon: string;
  };
const {
  visual,
  size,
  shape,
  className,
  icon,
  as: Tag = "button",
  colorPalette = "neutral",
  ...props
} = Astro.props;
const classes = iconButton({ size, shape, visual });
const link = Tag === "a" && props.href ? useLink(props.href) : {};
---

<Tag
  class={cx(
    css({ colorPalette }),
    /** @todo recipes for astro problem */
    // buttonBase({ visual }),
    classes.button,
    className,
  )}
  {...props}
  {...link}
>
  <Icon name={icon} class={classes.icon} />
</Tag>
